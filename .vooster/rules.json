{
  "rules": [
    {
      "type": "prd",
      "content": "## 프로젝트 개요\n\nBD 치과/한의원 웹사이트를 Next.js, React, TypeScript 기반으로 재구축합니다. 핵심 목표는 SEO 최적화, 반응형 UI, 인터랙티브 UX 구현이며, 모든 콘텐츠는 HTML/JSON 기반으로 관리하여 손쉽게 교체 가능해야 합니다.\n\n## 목표 및 기대효과\n\n*   기존 웹사이트의 10개 페이지 구조를 현대적인 기술 스택으로 재현합니다.\n*   스크롤 애니메이션, 이미지 슬라이더, 아코디언 FAQ 등 모든 인터랙션을 구현합니다.\n*   PC/모바일 반응형 대응 및 접근성을 준수합니다.\n*   SEO 최적화 (SSR/SSG, OG 태그, sitemap.xml, robots.txt, JSON-LD)를 달성합니다.\n*   콘텐츠 교체 용이성을 확보합니다 (HTML/JSON 데이터 관리).\n*   Jest 기반 TDD로 테스트 커버리지를 확보하고 안정성을 보장합니다.\n\n## 사이트 구조 (10페이지)\n\n*   메인화면 (병원소개)\n*   (왜 비디임플란트인가? or 한의원 소개)\n*   (의식하진정요법 임플란트 or 특정 진료/시술 안내)\n*   임플란트/일반진료\n*   치아교정/특수클리닉\n*   소아치과/체형교정\n*   심미치료/피부클리닉\n*   일반진료/다이어트클리닉\n*   커뮤니티 (공지사항)\n*   진료안내 & 오시는길\n\n## 타겟 사용자\n\n*   치과 또는 한의원 진료를 원하는 환자\n\n## 주요 사용 목적\n\n*   병원/한의원 정보 탐색 및 신뢰도 확인\n*   특정 시술/진료 정보 획득\n*   병원/한의원 위치 및 연락처 확인\n\n## 주요 기능\n\n*   **핵심 기능:** 각 페이지 구축, SEO 최적화, 인터랙티브 UX\n*   **추가 기능:** 다국어 지원, 병원/한의원 소셜 미디어 연동\n\n## Pain Points\n\n*   신뢰할 수 있는 병원/한의원 정보 부족\n*   원하는 시술/진료 정보 획득의 어려움\n*   검색을 통해 원하는 병원/한의원 정보를 쉽게 찾지 못함\n\n## 사용자 목표\n\n*   믿을 수 있는 병원/한의원에서 만족스러운 진료/시술을 받는 것\n*   궁금한 정보를 명확하게 얻는 것\n*   합리적인 비용으로 원하는 의료 서비스를 받는 것\n\n## 디자인\n\n*   예시 홈페이지와 동일한 디자인으로 진행\n\n## 기술 스펙\n\n*   프론트엔드:\n    *   Next.js 13 (App Router): SSR/SSG 기반 SEO 최적화\n    *   React 18 + TypeScript: 모듈형 컴포넌트 개발\n    *   styled-components: CSS-in-JS 기반 스타일 관리 및 다크모드/반응형 테마 지원\n    *   React Query: 데이터 fetching 및 캐싱, 추후 API 연동 확장 가능\n*   콘텐츠 관리:\n    *   JSON 기반 데이터 관리\n    *   각 페이지/컴포넌트별 콘텐츠(JSON 파일) 분리\n    *   텍스트/이미지/링크는 JSON을 수정하는 것만으로 교체 가능\n    *   React 컴포넌트 Props 주입 방식\n    *   JSON 데이터를 Props로 전달해 UI 렌더링\n    *   HTML 렌더링\n    *   단순 텍스트뿐 아니라 `<strong>`, `<ul>`, `<br/>` 등 HTML 태그 포함 가능\n    *   React 컴포넌트에서 dangerouslySetInnerHTML 또는 ReactNode 타입 Props 활용\n    *   하드코딩 ❌, JSON/HTML 교체 ✅\n*   테스트:\n    *   Jest + React Testing Library\n    *   단위 테스트 (네비게이션, FAQ 아코디언, 슬라이더)\n    *   통합 테스트 (페이지 전환, 반응형 렌더링)\n    *   접근성 테스트 (alt 속성, role, 키보드 네비게이션)\n\n## UX & 인터랙션\n\n*   스크롤 기반 애니메이션 (fade-in, slide-in)\n*   이미지 슬라이더 / 캐러셀\n*   FAQ 아코디언 (접근성 준수)\n*   탭 UI (치료 과정 설명)\n*   공지사항 게시판 (검색, 필터, 페이징)\n*   모바일 햄버거 네비게이션\n\n## SEO & 성능 최적화\n\n*   SEO\n    *   페이지별 `<title>`, `<meta description>`\n    *   OG/Twitter 카드 태그\n    *   JSON-LD (LocalBusiness, FAQPage schema)\n    *   sitemap.xml, robots.txt 자동 생성\n    *   SSR/SSG 기반 완전한 HTML 출력\n*   성능 최적화\n    *   Next.js `<Image>`로 이미지 최적화 (WebP/AVIF 지원)\n    *   코드 스플리팅 + lazy-loading\n    *   외부 위젯(Google Map 등) 지연 로딩\n    *   Lighthouse 기반 성능/SEO 점검\n\n## 반응형 & 접근성\n\n*   모바일 퍼스트 디자인\n    *   PC: 멀티 컬럼, hover 인터랙션\n    *   모바일: 단일 컬럼, 터치 최적화\n*   접근성\n    *   시맨틱 HTML 구조\n    *   키보드 네비게이션 및 포커스 표시\n    *   alt 텍스트 필수\n    *   WCAG 컬러 대비 기준 준수\n\n## 유지보수 & 확장성\n\n*   콘텐츠는 JSON 파일 수정만으로 교체 가능 (코드 수정 불필요)\n*   React Query 기반으로 API 연동 확장 용이 (예: Supabase, Headless CMS)\n*   컴포넌트 단위 구조화로 서비스 추가 페이지 확장 가능\n*   Jest TDD 기반으로 안정적 리팩토링 가능\n\n## 결론\n\n본 프로젝트는 BD 치과/한의원 웹사이트의 주요 페이지를 SEO 최적화/반응형/인터랙션 중심으로 재구축합니다. 콘텐츠 관리 방식을 HTML/JSON 기반으로 설계하여 실제 운영 시 손쉬운 유지보수와 확장성을 보장합니다. 궁극적으로 검색엔진 노출 강화, 환자 친화적 UI/UX, 개발팀의 운영 효율성 제고라는 세 가지 목표를 동시에 달성할 수 있습니다.",
      "writedAt": "2025-09-20T13:47:00.487Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n  \n## Tech Stack\n\nNext.js 15, shadcn, lucide-react, typescript, tailwindcss, supabase, @tanstack/react-query, es-toolkit, date-fns\n\n## Directory Structure\n\n\n/\n├── src/\n│   ├── app/                    # Next.js app router\n│   ├── components/             # common components\n│   │   └── ui/                 # shadcn/ui components\n│   ├── features/               # custom hooks (handle business logic)\n│   │   └── [featureName]/      # feature-based directory\n│   │   │   └── components/     # feature-based components\n│   │   │   └── hooks/          # feature-based hooks\n│   │   │   └── lib/            # feature-based lib\n│   │   │   └── pages/          # feature-based page components\n│   │   │   └── api.ts          # feature-based api callers\n│   │   │   └── schema.ts       # feature-based api schemas (zod)\n│   │   │   └── constants.ts    # feature-based constants\n│   │   │   └── types.ts        # feature-based types\n│   │   │   └── utils.ts        # feature-based utils\n│   │   └── ...                 # other features\n│   ├── hooks/                  # common hooks\n│   ├── lib/                    \n│   │   └── utils.ts            # shadcn cn utility function\n├── public/                     # static assets\n└── supabase/migrations         # supabase migrations (0000_name.sql)\n\n  ",
      "writedAt": "2025-09-20T13:47:00.487Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-09-20T13:47:00.487Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-20T13:47:00.487Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-20T13:47:00.487Z"
    }
  ]
}